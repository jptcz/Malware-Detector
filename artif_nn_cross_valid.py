#!/usr/bin/env python

from sklearn.model_selection import KFold
import pandas as pd
import numpy as np
import keras


dataset = pd.read_csv("MalwareData.csv", sep='|')
input_data = dataset.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = dataset['legitimate'].values

print("{}\nStarting cross-validation\n{}".format("-"*100, "-"*100))
acc_per_fold = []
loss_per_fold = []
kf = KFold(n_splits=10, shuffle=True)

fold_no = 1

for train, test in kf.split(input_data, labels):

    print("TRAIN: {} TEST: {}".format(train, test))

    model = keras.Sequential([
        keras.layers.Dense(64, input_shape=(54,), activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer="rmsprop", loss="binary_crossentropy", metrics=["accuracy"])
    history = model.fit(input_data[train], labels[train], epochs=10)
    loss, accuracy = model.evaluate(input_data[test], labels[test], verbose=0)
    print("Accuracy for fold {}: {}".format(fold_no, accuracy * 100, "%"))

    loss_per_fold.append(loss)
    acc_per_fold.append(accuracy * 100)
    fold_no = fold_no + 1

print("\n{}\nScore per fold\n{}\n".format("-"*100, "-"*100))
for i in range(0, len(acc_per_fold)):
    print("\tFold {} - Loss: {} - Accuracy: {}%".format(i, loss_per_fold[i], acc_per_fold[i]))
print("\n{}\nAverage scores for all folds:\n{}\n".format("-"*100, "-"*100))

print("\tAccuracy: {} (+-{})".format(np.mean(acc_per_fold), np.std(acc_per_fold)))
print("\tLoss: {}".format(np.mean(loss_per_fold)))
