#!/usr/bin/env python
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.svm import SVC
import pandas as pd
import time


def main():
    timestamp_0 = time.time()
    print("Reading dataset")
    dataset = pd.read_csv("MalwareData.csv", sep='|')
    input_data = dataset.drop(['Name', 'md5', 'legitimate'], axis=1).values
    labels = dataset['legitimate'].values

    benign_files = dataset[dataset['legitimate'] == 1].count()
    malware_files = dataset[dataset['legitimate'] == 0].count()
    print("Benign files: {}\nMalware files: {}".format(benign_files[1], malware_files[1]))

    probes = input_data.shape[0]
    features = input_data.shape[1]
    print("Probes: {}\nFeatures: {}".format(probes, features))
    timestamp_1 = time.time()

    k = 5
    best_features_data = SelectKBest(f_classif, k=k).fit_transform(input_data, labels)
    x_train, x_test, y_train, y_test = train_test_split(best_features_data, labels)

    print("Creating model")
    classifier = SVC(gamma='auto')

    timestamp_2 = time.time()
    print("Training model")
    classifier.fit(x_train, y_train)

    timestamp_3 = time.time()
    print("Evaluating model")
    accuracy = classifier.score(x_test, y_test)
    print("Accuracy: {}%".format(accuracy * 100))

    result = classifier.predict(x_test)
    conf_matrix = confusion_matrix(y_test, result)
    print("Confusion matrix: {}".format(conf_matrix))
    tp = conf_matrix[0][0]
    fp = conf_matrix[0][1]
    fn = conf_matrix[1][0]
    tn = conf_matrix[1][1]
    sensitivity = tp / (tp+fp) * 100
    print("Sensitivity: {}%".format(sensitivity))
    specificity = tn / (tn+fn) * 100
    print("Specificity: {}%".format(specificity))
    timestamp_4 = time.time()

    data_preparation_time = timestamp_1 - timestamp_0
    print("Data preparation time: {}".format(data_preparation_time))

    training_time = timestamp_3 - timestamp_2
    print("Training time: {}".format(training_time))

    evaluation_time = timestamp_4 - timestamp_3
    print("Evaluation time: {}".format(evaluation_time))

    summary_time = time.time() - timestamp_0
    print("Summary execution time: {}".format(summary_time))


if __name__ == "__main__":
    main()
