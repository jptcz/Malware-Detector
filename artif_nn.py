#!/usr/bin/env python

from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import pandas as pd
import keras
import time


def main():
    timestamp_0 = time.time()
    print("Reading dataset")
    dataset = pd.read_csv("MalwareData.csv", sep='|')
    input_data = dataset.drop(['Name', 'md5', 'legitimate'], axis=1).values
    labels = dataset['legitimate'].values

    benign_files = dataset[dataset['legitimate'] == 1].count()
    malware_files = dataset[dataset['legitimate'] == 0].count()
    print("Benign files: {}\nMalware files: {}".format(benign_files[1], malware_files[1]))

    probes = input_data.shape[0]
    features = input_data.shape[1]
    print("Probes: {}\nFeatures: {}".format(probes, features))
    timestamp_1 = time.time()

    # best_features_data = SelectKBest(f_classif, k=30).fit_transform(input_data, labels)
    x_train, x_test, y_train, y_test = train_test_split(input_data, labels, test_size=0.3)

    print("Creating model")
    model = keras.Sequential([
        keras.layers.Dense(64, input_shape=(54,), activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dropout(0.5),
        keras.layers.Dense(1, activation='sigmoid')
    ])

    print("Compiling model")
    model.compile(optimizer="rmsprop", loss="binary_crossentropy", metrics=["accuracy"])

    timestamp_2 = time.time()
    print("Training model")
    model.fit(x_train, y_train, epochs=10)

    timestamp_3 = time.time()
    print("Evaluating model")
    loss, accuracy = model.evaluate(x_test, y_test)
    result = model.predict(x_test)
    cm = confusion_matrix(y_test, result)
    print(cm)

    timestamp_4 = time.time()
    print("Accuracy: {}\n".format(accuracy * 100))

    data_preparation_time = timestamp_1 - timestamp_0
    print("Data preparation time: {}".format(data_preparation_time))

    training_time = timestamp_3 - timestamp_2
    print("Training time: {}".format(training_time))

    evaluation_time = timestamp_4 - timestamp_3
    print("Evaluation time: {}".format(evaluation_time))

    summary_time = time.time() - timestamp_0
    print("Summary execution time: {}".format(summary_time))


if __name__ == "__main__":
    main()
